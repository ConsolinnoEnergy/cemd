// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	model "github.com/enbility/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// EvseCCUseCaseReaderInterface is an autogenerated mock type for the EvseCCUseCaseReaderInterface type
type EvseCCUseCaseReaderInterface struct {
	mock.Mock
}

type EvseCCUseCaseReaderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *EvseCCUseCaseReaderInterface) EXPECT() *EvseCCUseCaseReaderInterface_Expecter {
	return &EvseCCUseCaseReaderInterface_Expecter{mock: &_m.Mock}
}

// EVSEConnected provides a mock function with given fields: ski
func (_m *EvseCCUseCaseReaderInterface) EVSEConnected(ski string) {
	_m.Called(ski)
}

// EvseCCUseCaseReaderInterface_EVSEConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVSEConnected'
type EvseCCUseCaseReaderInterface_EVSEConnected_Call struct {
	*mock.Call
}

// EVSEConnected is a helper method to define mock.On call
//   - ski string
func (_e *EvseCCUseCaseReaderInterface_Expecter) EVSEConnected(ski interface{}) *EvseCCUseCaseReaderInterface_EVSEConnected_Call {
	return &EvseCCUseCaseReaderInterface_EVSEConnected_Call{Call: _e.mock.On("EVSEConnected", ski)}
}

func (_c *EvseCCUseCaseReaderInterface_EVSEConnected_Call) Run(run func(ski string)) *EvseCCUseCaseReaderInterface_EVSEConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EvseCCUseCaseReaderInterface_EVSEConnected_Call) Return() *EvseCCUseCaseReaderInterface_EVSEConnected_Call {
	_c.Call.Return()
	return _c
}

func (_c *EvseCCUseCaseReaderInterface_EVSEConnected_Call) RunAndReturn(run func(string)) *EvseCCUseCaseReaderInterface_EVSEConnected_Call {
	_c.Call.Return(run)
	return _c
}

// EVSEDisconnected provides a mock function with given fields: ski
func (_m *EvseCCUseCaseReaderInterface) EVSEDisconnected(ski string) {
	_m.Called(ski)
}

// EvseCCUseCaseReaderInterface_EVSEDisconnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVSEDisconnected'
type EvseCCUseCaseReaderInterface_EVSEDisconnected_Call struct {
	*mock.Call
}

// EVSEDisconnected is a helper method to define mock.On call
//   - ski string
func (_e *EvseCCUseCaseReaderInterface_Expecter) EVSEDisconnected(ski interface{}) *EvseCCUseCaseReaderInterface_EVSEDisconnected_Call {
	return &EvseCCUseCaseReaderInterface_EVSEDisconnected_Call{Call: _e.mock.On("EVSEDisconnected", ski)}
}

func (_c *EvseCCUseCaseReaderInterface_EVSEDisconnected_Call) Run(run func(ski string)) *EvseCCUseCaseReaderInterface_EVSEDisconnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EvseCCUseCaseReaderInterface_EVSEDisconnected_Call) Return() *EvseCCUseCaseReaderInterface_EVSEDisconnected_Call {
	_c.Call.Return()
	return _c
}

func (_c *EvseCCUseCaseReaderInterface_EVSEDisconnected_Call) RunAndReturn(run func(string)) *EvseCCUseCaseReaderInterface_EVSEDisconnected_Call {
	_c.Call.Return(run)
	return _c
}

// EVSEOperatingStateChanged provides a mock function with given fields: ski, operatingState, lastErrorCode
func (_m *EvseCCUseCaseReaderInterface) EVSEOperatingStateChanged(ski string, operatingState *model.DeviceDiagnosisOperatingStateType, lastErrorCode *model.LastErrorCodeType) {
	_m.Called(ski, operatingState, lastErrorCode)
}

// EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVSEOperatingStateChanged'
type EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call struct {
	*mock.Call
}

// EVSEOperatingStateChanged is a helper method to define mock.On call
//   - ski string
//   - operatingState *model.DeviceDiagnosisOperatingStateType
//   - lastErrorCode *model.LastErrorCodeType
func (_e *EvseCCUseCaseReaderInterface_Expecter) EVSEOperatingStateChanged(ski interface{}, operatingState interface{}, lastErrorCode interface{}) *EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call {
	return &EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call{Call: _e.mock.On("EVSEOperatingStateChanged", ski, operatingState, lastErrorCode)}
}

func (_c *EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call) Run(run func(ski string, operatingState *model.DeviceDiagnosisOperatingStateType, lastErrorCode *model.LastErrorCodeType)) *EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.DeviceDiagnosisOperatingStateType), args[2].(*model.LastErrorCodeType))
	})
	return _c
}

func (_c *EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call) Return() *EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call) RunAndReturn(run func(string, *model.DeviceDiagnosisOperatingStateType, *model.LastErrorCodeType)) *EvseCCUseCaseReaderInterface_EVSEOperatingStateChanged_Call {
	_c.Call.Return(run)
	return _c
}

// NewEvseCCUseCaseReaderInterface creates a new instance of EvseCCUseCaseReaderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvseCCUseCaseReaderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvseCCUseCaseReaderInterface {
	mock := &EvseCCUseCaseReaderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
