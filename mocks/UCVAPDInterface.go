// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// UCVAPDInterface is an autogenerated mock type for the UCVAPDInterface type
type UCVAPDInterface struct {
	mock.Mock
}

type UCVAPDInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UCVAPDInterface) EXPECT() *UCVAPDInterface_Expecter {
	return &UCVAPDInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *UCVAPDInterface) AddFeatures() {
	_m.Called()
}

// UCVAPDInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type UCVAPDInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *UCVAPDInterface_Expecter) AddFeatures() *UCVAPDInterface_AddFeatures_Call {
	return &UCVAPDInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *UCVAPDInterface_AddFeatures_Call) Run(run func()) *UCVAPDInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCVAPDInterface_AddFeatures_Call) Return() *UCVAPDInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCVAPDInterface_AddFeatures_Call) RunAndReturn(run func()) *UCVAPDInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *UCVAPDInterface) AddUseCase() {
	_m.Called()
}

// UCVAPDInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type UCVAPDInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *UCVAPDInterface_Expecter) AddUseCase() *UCVAPDInterface_AddUseCase_Call {
	return &UCVAPDInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *UCVAPDInterface_AddUseCase_Call) Run(run func()) *UCVAPDInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCVAPDInterface_AddUseCase_Call) Return() *UCVAPDInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCVAPDInterface_AddUseCase_Call) RunAndReturn(run func()) *UCVAPDInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// IsUseCaseSupported provides a mock function with given fields: remoteEntity
func (_m *UCVAPDInterface) IsUseCaseSupported(remoteEntity api.EntityRemoteInterface) (bool, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for IsUseCaseSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (bool, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) bool); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCVAPDInterface_IsUseCaseSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUseCaseSupported'
type UCVAPDInterface_IsUseCaseSupported_Call struct {
	*mock.Call
}

// IsUseCaseSupported is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCVAPDInterface_Expecter) IsUseCaseSupported(remoteEntity interface{}) *UCVAPDInterface_IsUseCaseSupported_Call {
	return &UCVAPDInterface_IsUseCaseSupported_Call{Call: _e.mock.On("IsUseCaseSupported", remoteEntity)}
}

func (_c *UCVAPDInterface_IsUseCaseSupported_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCVAPDInterface_IsUseCaseSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCVAPDInterface_IsUseCaseSupported_Call) Return(_a0 bool, _a1 error) *UCVAPDInterface_IsUseCaseSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCVAPDInterface_IsUseCaseSupported_Call) RunAndReturn(run func(api.EntityRemoteInterface) (bool, error)) *UCVAPDInterface_IsUseCaseSupported_Call {
	_c.Call.Return(run)
	return _c
}

// PVYieldTotal provides a mock function with given fields: entity
func (_m *UCVAPDInterface) PVYieldTotal(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for PVYieldTotal")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCVAPDInterface_PVYieldTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PVYieldTotal'
type UCVAPDInterface_PVYieldTotal_Call struct {
	*mock.Call
}

// PVYieldTotal is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCVAPDInterface_Expecter) PVYieldTotal(entity interface{}) *UCVAPDInterface_PVYieldTotal_Call {
	return &UCVAPDInterface_PVYieldTotal_Call{Call: _e.mock.On("PVYieldTotal", entity)}
}

func (_c *UCVAPDInterface_PVYieldTotal_Call) Run(run func(entity api.EntityRemoteInterface)) *UCVAPDInterface_PVYieldTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCVAPDInterface_PVYieldTotal_Call) Return(_a0 float64, _a1 error) *UCVAPDInterface_PVYieldTotal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCVAPDInterface_PVYieldTotal_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCVAPDInterface_PVYieldTotal_Call {
	_c.Call.Return(run)
	return _c
}

// Power provides a mock function with given fields: entity
func (_m *UCVAPDInterface) Power(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Power")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCVAPDInterface_Power_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Power'
type UCVAPDInterface_Power_Call struct {
	*mock.Call
}

// Power is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCVAPDInterface_Expecter) Power(entity interface{}) *UCVAPDInterface_Power_Call {
	return &UCVAPDInterface_Power_Call{Call: _e.mock.On("Power", entity)}
}

func (_c *UCVAPDInterface_Power_Call) Run(run func(entity api.EntityRemoteInterface)) *UCVAPDInterface_Power_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCVAPDInterface_Power_Call) Return(_a0 float64, _a1 error) *UCVAPDInterface_Power_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCVAPDInterface_Power_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCVAPDInterface_Power_Call {
	_c.Call.Return(run)
	return _c
}

// PowerNominalPeak provides a mock function with given fields: entity
func (_m *UCVAPDInterface) PowerNominalPeak(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for PowerNominalPeak")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCVAPDInterface_PowerNominalPeak_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerNominalPeak'
type UCVAPDInterface_PowerNominalPeak_Call struct {
	*mock.Call
}

// PowerNominalPeak is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCVAPDInterface_Expecter) PowerNominalPeak(entity interface{}) *UCVAPDInterface_PowerNominalPeak_Call {
	return &UCVAPDInterface_PowerNominalPeak_Call{Call: _e.mock.On("PowerNominalPeak", entity)}
}

func (_c *UCVAPDInterface_PowerNominalPeak_Call) Run(run func(entity api.EntityRemoteInterface)) *UCVAPDInterface_PowerNominalPeak_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCVAPDInterface_PowerNominalPeak_Call) Return(_a0 float64, _a1 error) *UCVAPDInterface_PowerNominalPeak_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCVAPDInterface_PowerNominalPeak_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCVAPDInterface_PowerNominalPeak_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *UCVAPDInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// UCVAPDInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type UCVAPDInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *UCVAPDInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *UCVAPDInterface_UpdateUseCaseAvailability_Call {
	return &UCVAPDInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *UCVAPDInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *UCVAPDInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *UCVAPDInterface_UpdateUseCaseAvailability_Call) Return() *UCVAPDInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCVAPDInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *UCVAPDInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// UseCaseName provides a mock function with given fields:
func (_m *UCVAPDInterface) UseCaseName() model.UseCaseNameType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCaseName")
	}

	var r0 model.UseCaseNameType
	if rf, ok := ret.Get(0).(func() model.UseCaseNameType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UseCaseNameType)
	}

	return r0
}

// UCVAPDInterface_UseCaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCaseName'
type UCVAPDInterface_UseCaseName_Call struct {
	*mock.Call
}

// UseCaseName is a helper method to define mock.On call
func (_e *UCVAPDInterface_Expecter) UseCaseName() *UCVAPDInterface_UseCaseName_Call {
	return &UCVAPDInterface_UseCaseName_Call{Call: _e.mock.On("UseCaseName")}
}

func (_c *UCVAPDInterface_UseCaseName_Call) Run(run func()) *UCVAPDInterface_UseCaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCVAPDInterface_UseCaseName_Call) Return(_a0 model.UseCaseNameType) *UCVAPDInterface_UseCaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCVAPDInterface_UseCaseName_Call) RunAndReturn(run func() model.UseCaseNameType) *UCVAPDInterface_UseCaseName_Call {
	_c.Call.Return(run)
	return _c
}

// NewUCVAPDInterface creates a new instance of UCVAPDInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUCVAPDInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UCVAPDInterface {
	mock := &UCVAPDInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
