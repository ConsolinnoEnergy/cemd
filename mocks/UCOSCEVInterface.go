// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	cemdapi "github.com/enbility/cemd/api"
	api "github.com/enbility/spine-go/api"

	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// UCOSCEVInterface is an autogenerated mock type for the UCOSCEVInterface type
type UCOSCEVInterface struct {
	mock.Mock
}

type UCOSCEVInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UCOSCEVInterface) EXPECT() *UCOSCEVInterface_Expecter {
	return &UCOSCEVInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *UCOSCEVInterface) AddFeatures() {
	_m.Called()
}

// UCOSCEVInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type UCOSCEVInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *UCOSCEVInterface_Expecter) AddFeatures() *UCOSCEVInterface_AddFeatures_Call {
	return &UCOSCEVInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *UCOSCEVInterface_AddFeatures_Call) Run(run func()) *UCOSCEVInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCOSCEVInterface_AddFeatures_Call) Return() *UCOSCEVInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCOSCEVInterface_AddFeatures_Call) RunAndReturn(run func()) *UCOSCEVInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *UCOSCEVInterface) AddUseCase() {
	_m.Called()
}

// UCOSCEVInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type UCOSCEVInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *UCOSCEVInterface_Expecter) AddUseCase() *UCOSCEVInterface_AddUseCase_Call {
	return &UCOSCEVInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *UCOSCEVInterface_AddUseCase_Call) Run(run func()) *UCOSCEVInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCOSCEVInterface_AddUseCase_Call) Return() *UCOSCEVInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCOSCEVInterface_AddUseCase_Call) RunAndReturn(run func()) *UCOSCEVInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentLimits provides a mock function with given fields: entity
func (_m *UCOSCEVInterface) CurrentLimits(entity api.EntityRemoteInterface) ([]float64, []float64, []float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for CurrentLimits")
	}

	var r0 []float64
	var r1 []float64
	var r2 []float64
	var r3 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) ([]float64, []float64, []float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) []float64); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) []float64); ok {
		r1 = rf(entity)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float64)
		}
	}

	if rf, ok := ret.Get(2).(func(api.EntityRemoteInterface) []float64); ok {
		r2 = rf(entity)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]float64)
		}
	}

	if rf, ok := ret.Get(3).(func(api.EntityRemoteInterface) error); ok {
		r3 = rf(entity)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UCOSCEVInterface_CurrentLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentLimits'
type UCOSCEVInterface_CurrentLimits_Call struct {
	*mock.Call
}

// CurrentLimits is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCOSCEVInterface_Expecter) CurrentLimits(entity interface{}) *UCOSCEVInterface_CurrentLimits_Call {
	return &UCOSCEVInterface_CurrentLimits_Call{Call: _e.mock.On("CurrentLimits", entity)}
}

func (_c *UCOSCEVInterface_CurrentLimits_Call) Run(run func(entity api.EntityRemoteInterface)) *UCOSCEVInterface_CurrentLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCOSCEVInterface_CurrentLimits_Call) Return(_a0 []float64, _a1 []float64, _a2 []float64, _a3 error) *UCOSCEVInterface_CurrentLimits_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *UCOSCEVInterface_CurrentLimits_Call) RunAndReturn(run func(api.EntityRemoteInterface) ([]float64, []float64, []float64, error)) *UCOSCEVInterface_CurrentLimits_Call {
	_c.Call.Return(run)
	return _c
}

// IsUseCaseSupported provides a mock function with given fields: remoteEntity
func (_m *UCOSCEVInterface) IsUseCaseSupported(remoteEntity api.EntityRemoteInterface) (bool, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for IsUseCaseSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (bool, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) bool); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCOSCEVInterface_IsUseCaseSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUseCaseSupported'
type UCOSCEVInterface_IsUseCaseSupported_Call struct {
	*mock.Call
}

// IsUseCaseSupported is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCOSCEVInterface_Expecter) IsUseCaseSupported(remoteEntity interface{}) *UCOSCEVInterface_IsUseCaseSupported_Call {
	return &UCOSCEVInterface_IsUseCaseSupported_Call{Call: _e.mock.On("IsUseCaseSupported", remoteEntity)}
}

func (_c *UCOSCEVInterface_IsUseCaseSupported_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCOSCEVInterface_IsUseCaseSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCOSCEVInterface_IsUseCaseSupported_Call) Return(_a0 bool, _a1 error) *UCOSCEVInterface_IsUseCaseSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCOSCEVInterface_IsUseCaseSupported_Call) RunAndReturn(run func(api.EntityRemoteInterface) (bool, error)) *UCOSCEVInterface_IsUseCaseSupported_Call {
	_c.Call.Return(run)
	return _c
}

// LoadControlLimits provides a mock function with given fields: entity
func (_m *UCOSCEVInterface) LoadControlLimits(entity api.EntityRemoteInterface) ([]cemdapi.LoadLimitsPhase, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for LoadControlLimits")
	}

	var r0 []cemdapi.LoadLimitsPhase
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) ([]cemdapi.LoadLimitsPhase, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) []cemdapi.LoadLimitsPhase); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cemdapi.LoadLimitsPhase)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCOSCEVInterface_LoadControlLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadControlLimits'
type UCOSCEVInterface_LoadControlLimits_Call struct {
	*mock.Call
}

// LoadControlLimits is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCOSCEVInterface_Expecter) LoadControlLimits(entity interface{}) *UCOSCEVInterface_LoadControlLimits_Call {
	return &UCOSCEVInterface_LoadControlLimits_Call{Call: _e.mock.On("LoadControlLimits", entity)}
}

func (_c *UCOSCEVInterface_LoadControlLimits_Call) Run(run func(entity api.EntityRemoteInterface)) *UCOSCEVInterface_LoadControlLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCOSCEVInterface_LoadControlLimits_Call) Return(limits []cemdapi.LoadLimitsPhase, resultErr error) *UCOSCEVInterface_LoadControlLimits_Call {
	_c.Call.Return(limits, resultErr)
	return _c
}

func (_c *UCOSCEVInterface_LoadControlLimits_Call) RunAndReturn(run func(api.EntityRemoteInterface) ([]cemdapi.LoadLimitsPhase, error)) *UCOSCEVInterface_LoadControlLimits_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *UCOSCEVInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// UCOSCEVInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type UCOSCEVInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *UCOSCEVInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *UCOSCEVInterface_UpdateUseCaseAvailability_Call {
	return &UCOSCEVInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *UCOSCEVInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *UCOSCEVInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *UCOSCEVInterface_UpdateUseCaseAvailability_Call) Return() *UCOSCEVInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCOSCEVInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *UCOSCEVInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// UseCaseName provides a mock function with given fields:
func (_m *UCOSCEVInterface) UseCaseName() model.UseCaseNameType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCaseName")
	}

	var r0 model.UseCaseNameType
	if rf, ok := ret.Get(0).(func() model.UseCaseNameType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UseCaseNameType)
	}

	return r0
}

// UCOSCEVInterface_UseCaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCaseName'
type UCOSCEVInterface_UseCaseName_Call struct {
	*mock.Call
}

// UseCaseName is a helper method to define mock.On call
func (_e *UCOSCEVInterface_Expecter) UseCaseName() *UCOSCEVInterface_UseCaseName_Call {
	return &UCOSCEVInterface_UseCaseName_Call{Call: _e.mock.On("UseCaseName")}
}

func (_c *UCOSCEVInterface_UseCaseName_Call) Run(run func()) *UCOSCEVInterface_UseCaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCOSCEVInterface_UseCaseName_Call) Return(_a0 model.UseCaseNameType) *UCOSCEVInterface_UseCaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCOSCEVInterface_UseCaseName_Call) RunAndReturn(run func() model.UseCaseNameType) *UCOSCEVInterface_UseCaseName_Call {
	_c.Call.Return(run)
	return _c
}

// WriteLoadControlLimits provides a mock function with given fields: entity, limits
func (_m *UCOSCEVInterface) WriteLoadControlLimits(entity api.EntityRemoteInterface, limits []cemdapi.LoadLimitsPhase) (*model.MsgCounterType, error) {
	ret := _m.Called(entity, limits)

	if len(ret) == 0 {
		panic("no return value specified for WriteLoadControlLimits")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, []cemdapi.LoadLimitsPhase) (*model.MsgCounterType, error)); ok {
		return rf(entity, limits)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, []cemdapi.LoadLimitsPhase) *model.MsgCounterType); ok {
		r0 = rf(entity, limits)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface, []cemdapi.LoadLimitsPhase) error); ok {
		r1 = rf(entity, limits)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCOSCEVInterface_WriteLoadControlLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteLoadControlLimits'
type UCOSCEVInterface_WriteLoadControlLimits_Call struct {
	*mock.Call
}

// WriteLoadControlLimits is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - limits []cemdapi.LoadLimitsPhase
func (_e *UCOSCEVInterface_Expecter) WriteLoadControlLimits(entity interface{}, limits interface{}) *UCOSCEVInterface_WriteLoadControlLimits_Call {
	return &UCOSCEVInterface_WriteLoadControlLimits_Call{Call: _e.mock.On("WriteLoadControlLimits", entity, limits)}
}

func (_c *UCOSCEVInterface_WriteLoadControlLimits_Call) Run(run func(entity api.EntityRemoteInterface, limits []cemdapi.LoadLimitsPhase)) *UCOSCEVInterface_WriteLoadControlLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].([]cemdapi.LoadLimitsPhase))
	})
	return _c
}

func (_c *UCOSCEVInterface_WriteLoadControlLimits_Call) Return(_a0 *model.MsgCounterType, _a1 error) *UCOSCEVInterface_WriteLoadControlLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCOSCEVInterface_WriteLoadControlLimits_Call) RunAndReturn(run func(api.EntityRemoteInterface, []cemdapi.LoadLimitsPhase) (*model.MsgCounterType, error)) *UCOSCEVInterface_WriteLoadControlLimits_Call {
	_c.Call.Return(run)
	return _c
}

// NewUCOSCEVInterface creates a new instance of UCOSCEVInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUCOSCEVInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UCOSCEVInterface {
	mock := &UCOSCEVInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
