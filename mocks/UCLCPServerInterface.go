// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	cemdapi "github.com/enbility/cemd/api"
	api "github.com/enbility/spine-go/api"

	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"

	time "time"
)

// UCLCPServerInterface is an autogenerated mock type for the UCLCPServerInterface type
type UCLCPServerInterface struct {
	mock.Mock
}

type UCLCPServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UCLCPServerInterface) EXPECT() *UCLCPServerInterface_Expecter {
	return &UCLCPServerInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *UCLCPServerInterface) AddFeatures() {
	_m.Called()
}

// UCLCPServerInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type UCLCPServerInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *UCLCPServerInterface_Expecter) AddFeatures() *UCLCPServerInterface_AddFeatures_Call {
	return &UCLCPServerInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *UCLCPServerInterface_AddFeatures_Call) Run(run func()) *UCLCPServerInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPServerInterface_AddFeatures_Call) Return() *UCLCPServerInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLCPServerInterface_AddFeatures_Call) RunAndReturn(run func()) *UCLCPServerInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *UCLCPServerInterface) AddUseCase() {
	_m.Called()
}

// UCLCPServerInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type UCLCPServerInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *UCLCPServerInterface_Expecter) AddUseCase() *UCLCPServerInterface_AddUseCase_Call {
	return &UCLCPServerInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *UCLCPServerInterface_AddUseCase_Call) Run(run func()) *UCLCPServerInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPServerInterface_AddUseCase_Call) Return() *UCLCPServerInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLCPServerInterface_AddUseCase_Call) RunAndReturn(run func()) *UCLCPServerInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// ContractualConsumptionNominalMax provides a mock function with given fields:
func (_m *UCLCPServerInterface) ContractualConsumptionNominalMax() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContractualConsumptionNominalMax")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPServerInterface_ContractualConsumptionNominalMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContractualConsumptionNominalMax'
type UCLCPServerInterface_ContractualConsumptionNominalMax_Call struct {
	*mock.Call
}

// ContractualConsumptionNominalMax is a helper method to define mock.On call
func (_e *UCLCPServerInterface_Expecter) ContractualConsumptionNominalMax() *UCLCPServerInterface_ContractualConsumptionNominalMax_Call {
	return &UCLCPServerInterface_ContractualConsumptionNominalMax_Call{Call: _e.mock.On("ContractualConsumptionNominalMax")}
}

func (_c *UCLCPServerInterface_ContractualConsumptionNominalMax_Call) Run(run func()) *UCLCPServerInterface_ContractualConsumptionNominalMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPServerInterface_ContractualConsumptionNominalMax_Call) Return(_a0 float64, _a1 error) *UCLCPServerInterface_ContractualConsumptionNominalMax_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPServerInterface_ContractualConsumptionNominalMax_Call) RunAndReturn(run func() (float64, error)) *UCLCPServerInterface_ContractualConsumptionNominalMax_Call {
	_c.Call.Return(run)
	return _c
}

// FailsafeConsumptionActivePowerLimit provides a mock function with given fields:
func (_m *UCLCPServerInterface) FailsafeConsumptionActivePowerLimit() (float64, bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FailsafeConsumptionActivePowerLimit")
	}

	var r0 float64
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func() (float64, bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailsafeConsumptionActivePowerLimit'
type UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call struct {
	*mock.Call
}

// FailsafeConsumptionActivePowerLimit is a helper method to define mock.On call
func (_e *UCLCPServerInterface_Expecter) FailsafeConsumptionActivePowerLimit() *UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call {
	return &UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call{Call: _e.mock.On("FailsafeConsumptionActivePowerLimit")}
}

func (_c *UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call) Run(run func()) *UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call) Return(value float64, isChangeable bool, resultErr error) *UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Return(value, isChangeable, resultErr)
	return _c
}

func (_c *UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call) RunAndReturn(run func() (float64, bool, error)) *UCLCPServerInterface_FailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Return(run)
	return _c
}

// FailsafeDurationMinimum provides a mock function with given fields:
func (_m *UCLCPServerInterface) FailsafeDurationMinimum() (time.Duration, bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FailsafeDurationMinimum")
	}

	var r0 time.Duration
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func() (time.Duration, bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UCLCPServerInterface_FailsafeDurationMinimum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailsafeDurationMinimum'
type UCLCPServerInterface_FailsafeDurationMinimum_Call struct {
	*mock.Call
}

// FailsafeDurationMinimum is a helper method to define mock.On call
func (_e *UCLCPServerInterface_Expecter) FailsafeDurationMinimum() *UCLCPServerInterface_FailsafeDurationMinimum_Call {
	return &UCLCPServerInterface_FailsafeDurationMinimum_Call{Call: _e.mock.On("FailsafeDurationMinimum")}
}

func (_c *UCLCPServerInterface_FailsafeDurationMinimum_Call) Run(run func()) *UCLCPServerInterface_FailsafeDurationMinimum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPServerInterface_FailsafeDurationMinimum_Call) Return(duration time.Duration, isChangeable bool, resultErr error) *UCLCPServerInterface_FailsafeDurationMinimum_Call {
	_c.Call.Return(duration, isChangeable, resultErr)
	return _c
}

func (_c *UCLCPServerInterface_FailsafeDurationMinimum_Call) RunAndReturn(run func() (time.Duration, bool, error)) *UCLCPServerInterface_FailsafeDurationMinimum_Call {
	_c.Call.Return(run)
	return _c
}

// IsUseCaseSupported provides a mock function with given fields: remoteEntity
func (_m *UCLCPServerInterface) IsUseCaseSupported(remoteEntity api.EntityRemoteInterface) (bool, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for IsUseCaseSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (bool, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) bool); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPServerInterface_IsUseCaseSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUseCaseSupported'
type UCLCPServerInterface_IsUseCaseSupported_Call struct {
	*mock.Call
}

// IsUseCaseSupported is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCLCPServerInterface_Expecter) IsUseCaseSupported(remoteEntity interface{}) *UCLCPServerInterface_IsUseCaseSupported_Call {
	return &UCLCPServerInterface_IsUseCaseSupported_Call{Call: _e.mock.On("IsUseCaseSupported", remoteEntity)}
}

func (_c *UCLCPServerInterface_IsUseCaseSupported_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCLCPServerInterface_IsUseCaseSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLCPServerInterface_IsUseCaseSupported_Call) Return(_a0 bool, _a1 error) *UCLCPServerInterface_IsUseCaseSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPServerInterface_IsUseCaseSupported_Call) RunAndReturn(run func(api.EntityRemoteInterface) (bool, error)) *UCLCPServerInterface_IsUseCaseSupported_Call {
	_c.Call.Return(run)
	return _c
}

// LoadControlLimit provides a mock function with given fields:
func (_m *UCLCPServerInterface) LoadControlLimit() (cemdapi.LoadLimit, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadControlLimit")
	}

	var r0 cemdapi.LoadLimit
	var r1 error
	if rf, ok := ret.Get(0).(func() (cemdapi.LoadLimit, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() cemdapi.LoadLimit); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cemdapi.LoadLimit)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPServerInterface_LoadControlLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadControlLimit'
type UCLCPServerInterface_LoadControlLimit_Call struct {
	*mock.Call
}

// LoadControlLimit is a helper method to define mock.On call
func (_e *UCLCPServerInterface_Expecter) LoadControlLimit() *UCLCPServerInterface_LoadControlLimit_Call {
	return &UCLCPServerInterface_LoadControlLimit_Call{Call: _e.mock.On("LoadControlLimit")}
}

func (_c *UCLCPServerInterface_LoadControlLimit_Call) Run(run func()) *UCLCPServerInterface_LoadControlLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPServerInterface_LoadControlLimit_Call) Return(_a0 cemdapi.LoadLimit, _a1 error) *UCLCPServerInterface_LoadControlLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPServerInterface_LoadControlLimit_Call) RunAndReturn(run func() (cemdapi.LoadLimit, error)) *UCLCPServerInterface_LoadControlLimit_Call {
	_c.Call.Return(run)
	return _c
}

// PowerConsumptionNominalMax provides a mock function with given fields:
func (_m *UCLCPServerInterface) PowerConsumptionNominalMax() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PowerConsumptionNominalMax")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPServerInterface_PowerConsumptionNominalMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerConsumptionNominalMax'
type UCLCPServerInterface_PowerConsumptionNominalMax_Call struct {
	*mock.Call
}

// PowerConsumptionNominalMax is a helper method to define mock.On call
func (_e *UCLCPServerInterface_Expecter) PowerConsumptionNominalMax() *UCLCPServerInterface_PowerConsumptionNominalMax_Call {
	return &UCLCPServerInterface_PowerConsumptionNominalMax_Call{Call: _e.mock.On("PowerConsumptionNominalMax")}
}

func (_c *UCLCPServerInterface_PowerConsumptionNominalMax_Call) Run(run func()) *UCLCPServerInterface_PowerConsumptionNominalMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPServerInterface_PowerConsumptionNominalMax_Call) Return(_a0 float64, _a1 error) *UCLCPServerInterface_PowerConsumptionNominalMax_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPServerInterface_PowerConsumptionNominalMax_Call) RunAndReturn(run func() (float64, error)) *UCLCPServerInterface_PowerConsumptionNominalMax_Call {
	_c.Call.Return(run)
	return _c
}

// SetContractualConsumptionNominalMax provides a mock function with given fields: value
func (_m *UCLCPServerInterface) SetContractualConsumptionNominalMax(value float64) error {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for SetContractualConsumptionNominalMax")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UCLCPServerInterface_SetContractualConsumptionNominalMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContractualConsumptionNominalMax'
type UCLCPServerInterface_SetContractualConsumptionNominalMax_Call struct {
	*mock.Call
}

// SetContractualConsumptionNominalMax is a helper method to define mock.On call
//   - value float64
func (_e *UCLCPServerInterface_Expecter) SetContractualConsumptionNominalMax(value interface{}) *UCLCPServerInterface_SetContractualConsumptionNominalMax_Call {
	return &UCLCPServerInterface_SetContractualConsumptionNominalMax_Call{Call: _e.mock.On("SetContractualConsumptionNominalMax", value)}
}

func (_c *UCLCPServerInterface_SetContractualConsumptionNominalMax_Call) Run(run func(value float64)) *UCLCPServerInterface_SetContractualConsumptionNominalMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *UCLCPServerInterface_SetContractualConsumptionNominalMax_Call) Return(resultErr error) *UCLCPServerInterface_SetContractualConsumptionNominalMax_Call {
	_c.Call.Return(resultErr)
	return _c
}

func (_c *UCLCPServerInterface_SetContractualConsumptionNominalMax_Call) RunAndReturn(run func(float64) error) *UCLCPServerInterface_SetContractualConsumptionNominalMax_Call {
	_c.Call.Return(run)
	return _c
}

// SetFailsafeConsumptionActivePowerLimit provides a mock function with given fields: value, changeable
func (_m *UCLCPServerInterface) SetFailsafeConsumptionActivePowerLimit(value float64, changeable bool) error {
	ret := _m.Called(value, changeable)

	if len(ret) == 0 {
		panic("no return value specified for SetFailsafeConsumptionActivePowerLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64, bool) error); ok {
		r0 = rf(value, changeable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFailsafeConsumptionActivePowerLimit'
type UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call struct {
	*mock.Call
}

// SetFailsafeConsumptionActivePowerLimit is a helper method to define mock.On call
//   - value float64
//   - changeable bool
func (_e *UCLCPServerInterface_Expecter) SetFailsafeConsumptionActivePowerLimit(value interface{}, changeable interface{}) *UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call {
	return &UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call{Call: _e.mock.On("SetFailsafeConsumptionActivePowerLimit", value, changeable)}
}

func (_c *UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call) Run(run func(value float64, changeable bool)) *UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(bool))
	})
	return _c
}

func (_c *UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call) Return(resultErr error) *UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Return(resultErr)
	return _c
}

func (_c *UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call) RunAndReturn(run func(float64, bool) error) *UCLCPServerInterface_SetFailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SetFailsafeDurationMinimum provides a mock function with given fields: duration, changeable
func (_m *UCLCPServerInterface) SetFailsafeDurationMinimum(duration time.Duration, changeable bool) error {
	ret := _m.Called(duration, changeable)

	if len(ret) == 0 {
		panic("no return value specified for SetFailsafeDurationMinimum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration, bool) error); ok {
		r0 = rf(duration, changeable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UCLCPServerInterface_SetFailsafeDurationMinimum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFailsafeDurationMinimum'
type UCLCPServerInterface_SetFailsafeDurationMinimum_Call struct {
	*mock.Call
}

// SetFailsafeDurationMinimum is a helper method to define mock.On call
//   - duration time.Duration
//   - changeable bool
func (_e *UCLCPServerInterface_Expecter) SetFailsafeDurationMinimum(duration interface{}, changeable interface{}) *UCLCPServerInterface_SetFailsafeDurationMinimum_Call {
	return &UCLCPServerInterface_SetFailsafeDurationMinimum_Call{Call: _e.mock.On("SetFailsafeDurationMinimum", duration, changeable)}
}

func (_c *UCLCPServerInterface_SetFailsafeDurationMinimum_Call) Run(run func(duration time.Duration, changeable bool)) *UCLCPServerInterface_SetFailsafeDurationMinimum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(bool))
	})
	return _c
}

func (_c *UCLCPServerInterface_SetFailsafeDurationMinimum_Call) Return(resultErr error) *UCLCPServerInterface_SetFailsafeDurationMinimum_Call {
	_c.Call.Return(resultErr)
	return _c
}

func (_c *UCLCPServerInterface_SetFailsafeDurationMinimum_Call) RunAndReturn(run func(time.Duration, bool) error) *UCLCPServerInterface_SetFailsafeDurationMinimum_Call {
	_c.Call.Return(run)
	return _c
}

// SetLoadControlLimit provides a mock function with given fields: limit
func (_m *UCLCPServerInterface) SetLoadControlLimit(limit cemdapi.LoadLimit) error {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for SetLoadControlLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cemdapi.LoadLimit) error); ok {
		r0 = rf(limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UCLCPServerInterface_SetLoadControlLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLoadControlLimit'
type UCLCPServerInterface_SetLoadControlLimit_Call struct {
	*mock.Call
}

// SetLoadControlLimit is a helper method to define mock.On call
//   - limit cemdapi.LoadLimit
func (_e *UCLCPServerInterface_Expecter) SetLoadControlLimit(limit interface{}) *UCLCPServerInterface_SetLoadControlLimit_Call {
	return &UCLCPServerInterface_SetLoadControlLimit_Call{Call: _e.mock.On("SetLoadControlLimit", limit)}
}

func (_c *UCLCPServerInterface_SetLoadControlLimit_Call) Run(run func(limit cemdapi.LoadLimit)) *UCLCPServerInterface_SetLoadControlLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cemdapi.LoadLimit))
	})
	return _c
}

func (_c *UCLCPServerInterface_SetLoadControlLimit_Call) Return(resultErr error) *UCLCPServerInterface_SetLoadControlLimit_Call {
	_c.Call.Return(resultErr)
	return _c
}

func (_c *UCLCPServerInterface_SetLoadControlLimit_Call) RunAndReturn(run func(cemdapi.LoadLimit) error) *UCLCPServerInterface_SetLoadControlLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SetPowerConsumptionNominalMax provides a mock function with given fields: value
func (_m *UCLCPServerInterface) SetPowerConsumptionNominalMax(value float64) error {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for SetPowerConsumptionNominalMax")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UCLCPServerInterface_SetPowerConsumptionNominalMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPowerConsumptionNominalMax'
type UCLCPServerInterface_SetPowerConsumptionNominalMax_Call struct {
	*mock.Call
}

// SetPowerConsumptionNominalMax is a helper method to define mock.On call
//   - value float64
func (_e *UCLCPServerInterface_Expecter) SetPowerConsumptionNominalMax(value interface{}) *UCLCPServerInterface_SetPowerConsumptionNominalMax_Call {
	return &UCLCPServerInterface_SetPowerConsumptionNominalMax_Call{Call: _e.mock.On("SetPowerConsumptionNominalMax", value)}
}

func (_c *UCLCPServerInterface_SetPowerConsumptionNominalMax_Call) Run(run func(value float64)) *UCLCPServerInterface_SetPowerConsumptionNominalMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *UCLCPServerInterface_SetPowerConsumptionNominalMax_Call) Return(resultErr error) *UCLCPServerInterface_SetPowerConsumptionNominalMax_Call {
	_c.Call.Return(resultErr)
	return _c
}

func (_c *UCLCPServerInterface_SetPowerConsumptionNominalMax_Call) RunAndReturn(run func(float64) error) *UCLCPServerInterface_SetPowerConsumptionNominalMax_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *UCLCPServerInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// UCLCPServerInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type UCLCPServerInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *UCLCPServerInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *UCLCPServerInterface_UpdateUseCaseAvailability_Call {
	return &UCLCPServerInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *UCLCPServerInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *UCLCPServerInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *UCLCPServerInterface_UpdateUseCaseAvailability_Call) Return() *UCLCPServerInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLCPServerInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *UCLCPServerInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// UseCaseName provides a mock function with given fields:
func (_m *UCLCPServerInterface) UseCaseName() model.UseCaseNameType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCaseName")
	}

	var r0 model.UseCaseNameType
	if rf, ok := ret.Get(0).(func() model.UseCaseNameType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UseCaseNameType)
	}

	return r0
}

// UCLCPServerInterface_UseCaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCaseName'
type UCLCPServerInterface_UseCaseName_Call struct {
	*mock.Call
}

// UseCaseName is a helper method to define mock.On call
func (_e *UCLCPServerInterface_Expecter) UseCaseName() *UCLCPServerInterface_UseCaseName_Call {
	return &UCLCPServerInterface_UseCaseName_Call{Call: _e.mock.On("UseCaseName")}
}

func (_c *UCLCPServerInterface_UseCaseName_Call) Run(run func()) *UCLCPServerInterface_UseCaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPServerInterface_UseCaseName_Call) Return(_a0 model.UseCaseNameType) *UCLCPServerInterface_UseCaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCLCPServerInterface_UseCaseName_Call) RunAndReturn(run func() model.UseCaseNameType) *UCLCPServerInterface_UseCaseName_Call {
	_c.Call.Return(run)
	return _c
}

// NewUCLCPServerInterface creates a new instance of UCLCPServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUCLCPServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UCLCPServerInterface {
	mock := &UCLCPServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
