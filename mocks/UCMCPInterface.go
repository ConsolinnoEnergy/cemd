// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// UCMCPInterface is an autogenerated mock type for the UCMCPInterface type
type UCMCPInterface struct {
	mock.Mock
}

type UCMCPInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UCMCPInterface) EXPECT() *UCMCPInterface_Expecter {
	return &UCMCPInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *UCMCPInterface) AddFeatures() {
	_m.Called()
}

// UCMCPInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type UCMCPInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *UCMCPInterface_Expecter) AddFeatures() *UCMCPInterface_AddFeatures_Call {
	return &UCMCPInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *UCMCPInterface_AddFeatures_Call) Run(run func()) *UCMCPInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCMCPInterface_AddFeatures_Call) Return() *UCMCPInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCMCPInterface_AddFeatures_Call) RunAndReturn(run func()) *UCMCPInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *UCMCPInterface) AddUseCase() {
	_m.Called()
}

// UCMCPInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type UCMCPInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *UCMCPInterface_Expecter) AddUseCase() *UCMCPInterface_AddUseCase_Call {
	return &UCMCPInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *UCMCPInterface_AddUseCase_Call) Run(run func()) *UCMCPInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCMCPInterface_AddUseCase_Call) Return() *UCMCPInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCMCPInterface_AddUseCase_Call) RunAndReturn(run func()) *UCMCPInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentPerPhase provides a mock function with given fields: entity
func (_m *UCMCPInterface) CurrentPerPhase(entity api.EntityRemoteInterface) ([]float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for CurrentPerPhase")
	}

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) ([]float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) []float64); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCMCPInterface_CurrentPerPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentPerPhase'
type UCMCPInterface_CurrentPerPhase_Call struct {
	*mock.Call
}

// CurrentPerPhase is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCMCPInterface_Expecter) CurrentPerPhase(entity interface{}) *UCMCPInterface_CurrentPerPhase_Call {
	return &UCMCPInterface_CurrentPerPhase_Call{Call: _e.mock.On("CurrentPerPhase", entity)}
}

func (_c *UCMCPInterface_CurrentPerPhase_Call) Run(run func(entity api.EntityRemoteInterface)) *UCMCPInterface_CurrentPerPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCMCPInterface_CurrentPerPhase_Call) Return(_a0 []float64, _a1 error) *UCMCPInterface_CurrentPerPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCMCPInterface_CurrentPerPhase_Call) RunAndReturn(run func(api.EntityRemoteInterface) ([]float64, error)) *UCMCPInterface_CurrentPerPhase_Call {
	_c.Call.Return(run)
	return _c
}

// EnergyConsumed provides a mock function with given fields: entity
func (_m *UCMCPInterface) EnergyConsumed(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for EnergyConsumed")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCMCPInterface_EnergyConsumed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnergyConsumed'
type UCMCPInterface_EnergyConsumed_Call struct {
	*mock.Call
}

// EnergyConsumed is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCMCPInterface_Expecter) EnergyConsumed(entity interface{}) *UCMCPInterface_EnergyConsumed_Call {
	return &UCMCPInterface_EnergyConsumed_Call{Call: _e.mock.On("EnergyConsumed", entity)}
}

func (_c *UCMCPInterface_EnergyConsumed_Call) Run(run func(entity api.EntityRemoteInterface)) *UCMCPInterface_EnergyConsumed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCMCPInterface_EnergyConsumed_Call) Return(_a0 float64, _a1 error) *UCMCPInterface_EnergyConsumed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCMCPInterface_EnergyConsumed_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCMCPInterface_EnergyConsumed_Call {
	_c.Call.Return(run)
	return _c
}

// EnergyProduced provides a mock function with given fields: entity
func (_m *UCMCPInterface) EnergyProduced(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for EnergyProduced")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCMCPInterface_EnergyProduced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnergyProduced'
type UCMCPInterface_EnergyProduced_Call struct {
	*mock.Call
}

// EnergyProduced is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCMCPInterface_Expecter) EnergyProduced(entity interface{}) *UCMCPInterface_EnergyProduced_Call {
	return &UCMCPInterface_EnergyProduced_Call{Call: _e.mock.On("EnergyProduced", entity)}
}

func (_c *UCMCPInterface_EnergyProduced_Call) Run(run func(entity api.EntityRemoteInterface)) *UCMCPInterface_EnergyProduced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCMCPInterface_EnergyProduced_Call) Return(_a0 float64, _a1 error) *UCMCPInterface_EnergyProduced_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCMCPInterface_EnergyProduced_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCMCPInterface_EnergyProduced_Call {
	_c.Call.Return(run)
	return _c
}

// Frequency provides a mock function with given fields: entity
func (_m *UCMCPInterface) Frequency(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Frequency")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCMCPInterface_Frequency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Frequency'
type UCMCPInterface_Frequency_Call struct {
	*mock.Call
}

// Frequency is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCMCPInterface_Expecter) Frequency(entity interface{}) *UCMCPInterface_Frequency_Call {
	return &UCMCPInterface_Frequency_Call{Call: _e.mock.On("Frequency", entity)}
}

func (_c *UCMCPInterface_Frequency_Call) Run(run func(entity api.EntityRemoteInterface)) *UCMCPInterface_Frequency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCMCPInterface_Frequency_Call) Return(_a0 float64, _a1 error) *UCMCPInterface_Frequency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCMCPInterface_Frequency_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCMCPInterface_Frequency_Call {
	_c.Call.Return(run)
	return _c
}

// IsUseCaseSupported provides a mock function with given fields: remoteEntity
func (_m *UCMCPInterface) IsUseCaseSupported(remoteEntity api.EntityRemoteInterface) (bool, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for IsUseCaseSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (bool, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) bool); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCMCPInterface_IsUseCaseSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUseCaseSupported'
type UCMCPInterface_IsUseCaseSupported_Call struct {
	*mock.Call
}

// IsUseCaseSupported is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCMCPInterface_Expecter) IsUseCaseSupported(remoteEntity interface{}) *UCMCPInterface_IsUseCaseSupported_Call {
	return &UCMCPInterface_IsUseCaseSupported_Call{Call: _e.mock.On("IsUseCaseSupported", remoteEntity)}
}

func (_c *UCMCPInterface_IsUseCaseSupported_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCMCPInterface_IsUseCaseSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCMCPInterface_IsUseCaseSupported_Call) Return(_a0 bool, _a1 error) *UCMCPInterface_IsUseCaseSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCMCPInterface_IsUseCaseSupported_Call) RunAndReturn(run func(api.EntityRemoteInterface) (bool, error)) *UCMCPInterface_IsUseCaseSupported_Call {
	_c.Call.Return(run)
	return _c
}

// Power provides a mock function with given fields: entity
func (_m *UCMCPInterface) Power(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Power")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCMCPInterface_Power_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Power'
type UCMCPInterface_Power_Call struct {
	*mock.Call
}

// Power is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCMCPInterface_Expecter) Power(entity interface{}) *UCMCPInterface_Power_Call {
	return &UCMCPInterface_Power_Call{Call: _e.mock.On("Power", entity)}
}

func (_c *UCMCPInterface_Power_Call) Run(run func(entity api.EntityRemoteInterface)) *UCMCPInterface_Power_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCMCPInterface_Power_Call) Return(_a0 float64, _a1 error) *UCMCPInterface_Power_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCMCPInterface_Power_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCMCPInterface_Power_Call {
	_c.Call.Return(run)
	return _c
}

// PowerPerPhase provides a mock function with given fields: entity
func (_m *UCMCPInterface) PowerPerPhase(entity api.EntityRemoteInterface) ([]float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for PowerPerPhase")
	}

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) ([]float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) []float64); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCMCPInterface_PowerPerPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerPerPhase'
type UCMCPInterface_PowerPerPhase_Call struct {
	*mock.Call
}

// PowerPerPhase is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCMCPInterface_Expecter) PowerPerPhase(entity interface{}) *UCMCPInterface_PowerPerPhase_Call {
	return &UCMCPInterface_PowerPerPhase_Call{Call: _e.mock.On("PowerPerPhase", entity)}
}

func (_c *UCMCPInterface_PowerPerPhase_Call) Run(run func(entity api.EntityRemoteInterface)) *UCMCPInterface_PowerPerPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCMCPInterface_PowerPerPhase_Call) Return(_a0 []float64, _a1 error) *UCMCPInterface_PowerPerPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCMCPInterface_PowerPerPhase_Call) RunAndReturn(run func(api.EntityRemoteInterface) ([]float64, error)) *UCMCPInterface_PowerPerPhase_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *UCMCPInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// UCMCPInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type UCMCPInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *UCMCPInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *UCMCPInterface_UpdateUseCaseAvailability_Call {
	return &UCMCPInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *UCMCPInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *UCMCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *UCMCPInterface_UpdateUseCaseAvailability_Call) Return() *UCMCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCMCPInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *UCMCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// UseCaseName provides a mock function with given fields:
func (_m *UCMCPInterface) UseCaseName() model.UseCaseNameType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCaseName")
	}

	var r0 model.UseCaseNameType
	if rf, ok := ret.Get(0).(func() model.UseCaseNameType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UseCaseNameType)
	}

	return r0
}

// UCMCPInterface_UseCaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCaseName'
type UCMCPInterface_UseCaseName_Call struct {
	*mock.Call
}

// UseCaseName is a helper method to define mock.On call
func (_e *UCMCPInterface_Expecter) UseCaseName() *UCMCPInterface_UseCaseName_Call {
	return &UCMCPInterface_UseCaseName_Call{Call: _e.mock.On("UseCaseName")}
}

func (_c *UCMCPInterface_UseCaseName_Call) Run(run func()) *UCMCPInterface_UseCaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCMCPInterface_UseCaseName_Call) Return(_a0 model.UseCaseNameType) *UCMCPInterface_UseCaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCMCPInterface_UseCaseName_Call) RunAndReturn(run func() model.UseCaseNameType) *UCMCPInterface_UseCaseName_Call {
	_c.Call.Return(run)
	return _c
}

// VoltagePerPhase provides a mock function with given fields: entity
func (_m *UCMCPInterface) VoltagePerPhase(entity api.EntityRemoteInterface) ([]float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for VoltagePerPhase")
	}

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) ([]float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) []float64); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCMCPInterface_VoltagePerPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VoltagePerPhase'
type UCMCPInterface_VoltagePerPhase_Call struct {
	*mock.Call
}

// VoltagePerPhase is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCMCPInterface_Expecter) VoltagePerPhase(entity interface{}) *UCMCPInterface_VoltagePerPhase_Call {
	return &UCMCPInterface_VoltagePerPhase_Call{Call: _e.mock.On("VoltagePerPhase", entity)}
}

func (_c *UCMCPInterface_VoltagePerPhase_Call) Run(run func(entity api.EntityRemoteInterface)) *UCMCPInterface_VoltagePerPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCMCPInterface_VoltagePerPhase_Call) Return(_a0 []float64, _a1 error) *UCMCPInterface_VoltagePerPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCMCPInterface_VoltagePerPhase_Call) RunAndReturn(run func(api.EntityRemoteInterface) ([]float64, error)) *UCMCPInterface_VoltagePerPhase_Call {
	_c.Call.Return(run)
	return _c
}

// NewUCMCPInterface creates a new instance of UCMCPInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUCMCPInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UCMCPInterface {
	mock := &UCMCPInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
