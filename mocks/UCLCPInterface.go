// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	cemdapi "github.com/enbility/cemd/api"
	api "github.com/enbility/spine-go/api"

	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"

	time "time"
)

// UCLCPInterface is an autogenerated mock type for the UCLCPInterface type
type UCLCPInterface struct {
	mock.Mock
}

type UCLCPInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UCLCPInterface) EXPECT() *UCLCPInterface_Expecter {
	return &UCLCPInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *UCLCPInterface) AddFeatures() {
	_m.Called()
}

// UCLCPInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type UCLCPInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *UCLCPInterface_Expecter) AddFeatures() *UCLCPInterface_AddFeatures_Call {
	return &UCLCPInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *UCLCPInterface_AddFeatures_Call) Run(run func()) *UCLCPInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPInterface_AddFeatures_Call) Return() *UCLCPInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLCPInterface_AddFeatures_Call) RunAndReturn(run func()) *UCLCPInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *UCLCPInterface) AddUseCase() {
	_m.Called()
}

// UCLCPInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type UCLCPInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *UCLCPInterface_Expecter) AddUseCase() *UCLCPInterface_AddUseCase_Call {
	return &UCLCPInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *UCLCPInterface_AddUseCase_Call) Run(run func()) *UCLCPInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPInterface_AddUseCase_Call) Return() *UCLCPInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLCPInterface_AddUseCase_Call) RunAndReturn(run func()) *UCLCPInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// FailsafeConsumptionActivePowerLimit provides a mock function with given fields: entity
func (_m *UCLCPInterface) FailsafeConsumptionActivePowerLimit(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for FailsafeConsumptionActivePowerLimit")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailsafeConsumptionActivePowerLimit'
type UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call struct {
	*mock.Call
}

// FailsafeConsumptionActivePowerLimit is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCLCPInterface_Expecter) FailsafeConsumptionActivePowerLimit(entity interface{}) *UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call {
	return &UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call{Call: _e.mock.On("FailsafeConsumptionActivePowerLimit", entity)}
}

func (_c *UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call) Run(run func(entity api.EntityRemoteInterface)) *UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call) Return(_a0 float64, _a1 error) *UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCLCPInterface_FailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Return(run)
	return _c
}

// FailsafeDurationMinimum provides a mock function with given fields: entity
func (_m *UCLCPInterface) FailsafeDurationMinimum(entity api.EntityRemoteInterface) (time.Duration, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for FailsafeDurationMinimum")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (time.Duration, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) time.Duration); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPInterface_FailsafeDurationMinimum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailsafeDurationMinimum'
type UCLCPInterface_FailsafeDurationMinimum_Call struct {
	*mock.Call
}

// FailsafeDurationMinimum is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCLCPInterface_Expecter) FailsafeDurationMinimum(entity interface{}) *UCLCPInterface_FailsafeDurationMinimum_Call {
	return &UCLCPInterface_FailsafeDurationMinimum_Call{Call: _e.mock.On("FailsafeDurationMinimum", entity)}
}

func (_c *UCLCPInterface_FailsafeDurationMinimum_Call) Run(run func(entity api.EntityRemoteInterface)) *UCLCPInterface_FailsafeDurationMinimum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLCPInterface_FailsafeDurationMinimum_Call) Return(_a0 time.Duration, _a1 error) *UCLCPInterface_FailsafeDurationMinimum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPInterface_FailsafeDurationMinimum_Call) RunAndReturn(run func(api.EntityRemoteInterface) (time.Duration, error)) *UCLCPInterface_FailsafeDurationMinimum_Call {
	_c.Call.Return(run)
	return _c
}

// IsUseCaseSupported provides a mock function with given fields: remoteEntity
func (_m *UCLCPInterface) IsUseCaseSupported(remoteEntity api.EntityRemoteInterface) (bool, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for IsUseCaseSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (bool, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) bool); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPInterface_IsUseCaseSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUseCaseSupported'
type UCLCPInterface_IsUseCaseSupported_Call struct {
	*mock.Call
}

// IsUseCaseSupported is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCLCPInterface_Expecter) IsUseCaseSupported(remoteEntity interface{}) *UCLCPInterface_IsUseCaseSupported_Call {
	return &UCLCPInterface_IsUseCaseSupported_Call{Call: _e.mock.On("IsUseCaseSupported", remoteEntity)}
}

func (_c *UCLCPInterface_IsUseCaseSupported_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCLCPInterface_IsUseCaseSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLCPInterface_IsUseCaseSupported_Call) Return(_a0 bool, _a1 error) *UCLCPInterface_IsUseCaseSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPInterface_IsUseCaseSupported_Call) RunAndReturn(run func(api.EntityRemoteInterface) (bool, error)) *UCLCPInterface_IsUseCaseSupported_Call {
	_c.Call.Return(run)
	return _c
}

// LoadControlLimit provides a mock function with given fields: entity
func (_m *UCLCPInterface) LoadControlLimit(entity api.EntityRemoteInterface) (cemdapi.LoadLimit, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for LoadControlLimit")
	}

	var r0 cemdapi.LoadLimit
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (cemdapi.LoadLimit, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) cemdapi.LoadLimit); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(cemdapi.LoadLimit)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPInterface_LoadControlLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadControlLimit'
type UCLCPInterface_LoadControlLimit_Call struct {
	*mock.Call
}

// LoadControlLimit is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCLCPInterface_Expecter) LoadControlLimit(entity interface{}) *UCLCPInterface_LoadControlLimit_Call {
	return &UCLCPInterface_LoadControlLimit_Call{Call: _e.mock.On("LoadControlLimit", entity)}
}

func (_c *UCLCPInterface_LoadControlLimit_Call) Run(run func(entity api.EntityRemoteInterface)) *UCLCPInterface_LoadControlLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLCPInterface_LoadControlLimit_Call) Return(limit cemdapi.LoadLimit, resultErr error) *UCLCPInterface_LoadControlLimit_Call {
	_c.Call.Return(limit, resultErr)
	return _c
}

func (_c *UCLCPInterface_LoadControlLimit_Call) RunAndReturn(run func(api.EntityRemoteInterface) (cemdapi.LoadLimit, error)) *UCLCPInterface_LoadControlLimit_Call {
	_c.Call.Return(run)
	return _c
}

// PowerConsumptionNominalMax provides a mock function with given fields: entity
func (_m *UCLCPInterface) PowerConsumptionNominalMax(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for PowerConsumptionNominalMax")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPInterface_PowerConsumptionNominalMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerConsumptionNominalMax'
type UCLCPInterface_PowerConsumptionNominalMax_Call struct {
	*mock.Call
}

// PowerConsumptionNominalMax is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCLCPInterface_Expecter) PowerConsumptionNominalMax(entity interface{}) *UCLCPInterface_PowerConsumptionNominalMax_Call {
	return &UCLCPInterface_PowerConsumptionNominalMax_Call{Call: _e.mock.On("PowerConsumptionNominalMax", entity)}
}

func (_c *UCLCPInterface_PowerConsumptionNominalMax_Call) Run(run func(entity api.EntityRemoteInterface)) *UCLCPInterface_PowerConsumptionNominalMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLCPInterface_PowerConsumptionNominalMax_Call) Return(_a0 float64, _a1 error) *UCLCPInterface_PowerConsumptionNominalMax_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPInterface_PowerConsumptionNominalMax_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCLCPInterface_PowerConsumptionNominalMax_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *UCLCPInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// UCLCPInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type UCLCPInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *UCLCPInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *UCLCPInterface_UpdateUseCaseAvailability_Call {
	return &UCLCPInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *UCLCPInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *UCLCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *UCLCPInterface_UpdateUseCaseAvailability_Call) Return() *UCLCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLCPInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *UCLCPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// UseCaseName provides a mock function with given fields:
func (_m *UCLCPInterface) UseCaseName() model.UseCaseNameType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCaseName")
	}

	var r0 model.UseCaseNameType
	if rf, ok := ret.Get(0).(func() model.UseCaseNameType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UseCaseNameType)
	}

	return r0
}

// UCLCPInterface_UseCaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCaseName'
type UCLCPInterface_UseCaseName_Call struct {
	*mock.Call
}

// UseCaseName is a helper method to define mock.On call
func (_e *UCLCPInterface_Expecter) UseCaseName() *UCLCPInterface_UseCaseName_Call {
	return &UCLCPInterface_UseCaseName_Call{Call: _e.mock.On("UseCaseName")}
}

func (_c *UCLCPInterface_UseCaseName_Call) Run(run func()) *UCLCPInterface_UseCaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLCPInterface_UseCaseName_Call) Return(_a0 model.UseCaseNameType) *UCLCPInterface_UseCaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCLCPInterface_UseCaseName_Call) RunAndReturn(run func() model.UseCaseNameType) *UCLCPInterface_UseCaseName_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFailsafeConsumptionActivePowerLimit provides a mock function with given fields: entity, value
func (_m *UCLCPInterface) WriteFailsafeConsumptionActivePowerLimit(entity api.EntityRemoteInterface, value float64) (*model.MsgCounterType, error) {
	ret := _m.Called(entity, value)

	if len(ret) == 0 {
		panic("no return value specified for WriteFailsafeConsumptionActivePowerLimit")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, float64) (*model.MsgCounterType, error)); ok {
		return rf(entity, value)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, float64) *model.MsgCounterType); ok {
		r0 = rf(entity, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface, float64) error); ok {
		r1 = rf(entity, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFailsafeConsumptionActivePowerLimit'
type UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call struct {
	*mock.Call
}

// WriteFailsafeConsumptionActivePowerLimit is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - value float64
func (_e *UCLCPInterface_Expecter) WriteFailsafeConsumptionActivePowerLimit(entity interface{}, value interface{}) *UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call {
	return &UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call{Call: _e.mock.On("WriteFailsafeConsumptionActivePowerLimit", entity, value)}
}

func (_c *UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call) Run(run func(entity api.EntityRemoteInterface, value float64)) *UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].(float64))
	})
	return _c
}

func (_c *UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call) Return(_a0 *model.MsgCounterType, _a1 error) *UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call) RunAndReturn(run func(api.EntityRemoteInterface, float64) (*model.MsgCounterType, error)) *UCLCPInterface_WriteFailsafeConsumptionActivePowerLimit_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFailsafeDurationMinimum provides a mock function with given fields: entity, duration
func (_m *UCLCPInterface) WriteFailsafeDurationMinimum(entity api.EntityRemoteInterface, duration time.Duration) (*model.MsgCounterType, error) {
	ret := _m.Called(entity, duration)

	if len(ret) == 0 {
		panic("no return value specified for WriteFailsafeDurationMinimum")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, time.Duration) (*model.MsgCounterType, error)); ok {
		return rf(entity, duration)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, time.Duration) *model.MsgCounterType); ok {
		r0 = rf(entity, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface, time.Duration) error); ok {
		r1 = rf(entity, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPInterface_WriteFailsafeDurationMinimum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFailsafeDurationMinimum'
type UCLCPInterface_WriteFailsafeDurationMinimum_Call struct {
	*mock.Call
}

// WriteFailsafeDurationMinimum is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - duration time.Duration
func (_e *UCLCPInterface_Expecter) WriteFailsafeDurationMinimum(entity interface{}, duration interface{}) *UCLCPInterface_WriteFailsafeDurationMinimum_Call {
	return &UCLCPInterface_WriteFailsafeDurationMinimum_Call{Call: _e.mock.On("WriteFailsafeDurationMinimum", entity, duration)}
}

func (_c *UCLCPInterface_WriteFailsafeDurationMinimum_Call) Run(run func(entity api.EntityRemoteInterface, duration time.Duration)) *UCLCPInterface_WriteFailsafeDurationMinimum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].(time.Duration))
	})
	return _c
}

func (_c *UCLCPInterface_WriteFailsafeDurationMinimum_Call) Return(_a0 *model.MsgCounterType, _a1 error) *UCLCPInterface_WriteFailsafeDurationMinimum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPInterface_WriteFailsafeDurationMinimum_Call) RunAndReturn(run func(api.EntityRemoteInterface, time.Duration) (*model.MsgCounterType, error)) *UCLCPInterface_WriteFailsafeDurationMinimum_Call {
	_c.Call.Return(run)
	return _c
}

// WriteLoadControlLimit provides a mock function with given fields: entity, limit
func (_m *UCLCPInterface) WriteLoadControlLimit(entity api.EntityRemoteInterface, limit cemdapi.LoadLimit) (*model.MsgCounterType, error) {
	ret := _m.Called(entity, limit)

	if len(ret) == 0 {
		panic("no return value specified for WriteLoadControlLimit")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, cemdapi.LoadLimit) (*model.MsgCounterType, error)); ok {
		return rf(entity, limit)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, cemdapi.LoadLimit) *model.MsgCounterType); ok {
		r0 = rf(entity, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface, cemdapi.LoadLimit) error); ok {
		r1 = rf(entity, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLCPInterface_WriteLoadControlLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteLoadControlLimit'
type UCLCPInterface_WriteLoadControlLimit_Call struct {
	*mock.Call
}

// WriteLoadControlLimit is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - limit cemdapi.LoadLimit
func (_e *UCLCPInterface_Expecter) WriteLoadControlLimit(entity interface{}, limit interface{}) *UCLCPInterface_WriteLoadControlLimit_Call {
	return &UCLCPInterface_WriteLoadControlLimit_Call{Call: _e.mock.On("WriteLoadControlLimit", entity, limit)}
}

func (_c *UCLCPInterface_WriteLoadControlLimit_Call) Run(run func(entity api.EntityRemoteInterface, limit cemdapi.LoadLimit)) *UCLCPInterface_WriteLoadControlLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].(cemdapi.LoadLimit))
	})
	return _c
}

func (_c *UCLCPInterface_WriteLoadControlLimit_Call) Return(_a0 *model.MsgCounterType, _a1 error) *UCLCPInterface_WriteLoadControlLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLCPInterface_WriteLoadControlLimit_Call) RunAndReturn(run func(api.EntityRemoteInterface, cemdapi.LoadLimit) (*model.MsgCounterType, error)) *UCLCPInterface_WriteLoadControlLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewUCLCPInterface creates a new instance of UCLCPInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUCLCPInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UCLCPInterface {
	mock := &UCLCPInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
