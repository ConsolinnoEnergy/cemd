// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/cemd/api"
	mock "github.com/stretchr/testify/mock"
)

// CemInterface is an autogenerated mock type for the CemInterface type
type CemInterface struct {
	mock.Mock
}

type CemInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CemInterface) EXPECT() *CemInterface_Expecter {
	return &CemInterface_Expecter{mock: &_m.Mock}
}

// AddUseCase provides a mock function with given fields: usecase
func (_m *CemInterface) AddUseCase(usecase api.UseCaseInterface) {
	_m.Called(usecase)
}

// CemInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type CemInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
//   - usecase api.UseCaseInterface
func (_e *CemInterface_Expecter) AddUseCase(usecase interface{}) *CemInterface_AddUseCase_Call {
	return &CemInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase", usecase)}
}

func (_c *CemInterface_AddUseCase_Call) Run(run func(usecase api.UseCaseInterface)) *CemInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UseCaseInterface))
	})
	return _c
}

func (_c *CemInterface_AddUseCase_Call) Return() *CemInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *CemInterface_AddUseCase_Call) RunAndReturn(run func(api.UseCaseInterface)) *CemInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields:
func (_m *CemInterface) Setup() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CemInterface_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type CemInterface_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
func (_e *CemInterface_Expecter) Setup() *CemInterface_Setup_Call {
	return &CemInterface_Setup_Call{Call: _e.mock.On("Setup")}
}

func (_c *CemInterface_Setup_Call) Run(run func()) *CemInterface_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CemInterface_Setup_Call) Return(_a0 error) *CemInterface_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CemInterface_Setup_Call) RunAndReturn(run func() error) *CemInterface_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *CemInterface) Shutdown() {
	_m.Called()
}

// CemInterface_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type CemInterface_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *CemInterface_Expecter) Shutdown() *CemInterface_Shutdown_Call {
	return &CemInterface_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *CemInterface_Shutdown_Call) Run(run func()) *CemInterface_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CemInterface_Shutdown_Call) Return() *CemInterface_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *CemInterface_Shutdown_Call) RunAndReturn(run func()) *CemInterface_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *CemInterface) Start() {
	_m.Called()
}

// CemInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type CemInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *CemInterface_Expecter) Start() *CemInterface_Start_Call {
	return &CemInterface_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *CemInterface_Start_Call) Run(run func()) *CemInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CemInterface_Start_Call) Return() *CemInterface_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *CemInterface_Start_Call) RunAndReturn(run func()) *CemInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewCemInterface creates a new instance of CemInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCemInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CemInterface {
	mock := &CemInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
