// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	cemdapi "github.com/enbility/cemd/api"
	api "github.com/enbility/spine-go/api"

	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"

	time "time"
)

// UCLPPInterface is an autogenerated mock type for the UCLPPInterface type
type UCLPPInterface struct {
	mock.Mock
}

type UCLPPInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UCLPPInterface) EXPECT() *UCLPPInterface_Expecter {
	return &UCLPPInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *UCLPPInterface) AddFeatures() {
	_m.Called()
}

// UCLPPInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type UCLPPInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *UCLPPInterface_Expecter) AddFeatures() *UCLPPInterface_AddFeatures_Call {
	return &UCLPPInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *UCLPPInterface_AddFeatures_Call) Run(run func()) *UCLPPInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLPPInterface_AddFeatures_Call) Return() *UCLPPInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLPPInterface_AddFeatures_Call) RunAndReturn(run func()) *UCLPPInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *UCLPPInterface) AddUseCase() {
	_m.Called()
}

// UCLPPInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type UCLPPInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *UCLPPInterface_Expecter) AddUseCase() *UCLPPInterface_AddUseCase_Call {
	return &UCLPPInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *UCLPPInterface_AddUseCase_Call) Run(run func()) *UCLPPInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLPPInterface_AddUseCase_Call) Return() *UCLPPInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLPPInterface_AddUseCase_Call) RunAndReturn(run func()) *UCLPPInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// FailsafeDurationMinimum provides a mock function with given fields: entity
func (_m *UCLPPInterface) FailsafeDurationMinimum(entity api.EntityRemoteInterface) (time.Duration, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for FailsafeDurationMinimum")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (time.Duration, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) time.Duration); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLPPInterface_FailsafeDurationMinimum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailsafeDurationMinimum'
type UCLPPInterface_FailsafeDurationMinimum_Call struct {
	*mock.Call
}

// FailsafeDurationMinimum is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCLPPInterface_Expecter) FailsafeDurationMinimum(entity interface{}) *UCLPPInterface_FailsafeDurationMinimum_Call {
	return &UCLPPInterface_FailsafeDurationMinimum_Call{Call: _e.mock.On("FailsafeDurationMinimum", entity)}
}

func (_c *UCLPPInterface_FailsafeDurationMinimum_Call) Run(run func(entity api.EntityRemoteInterface)) *UCLPPInterface_FailsafeDurationMinimum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLPPInterface_FailsafeDurationMinimum_Call) Return(_a0 time.Duration, _a1 error) *UCLPPInterface_FailsafeDurationMinimum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLPPInterface_FailsafeDurationMinimum_Call) RunAndReturn(run func(api.EntityRemoteInterface) (time.Duration, error)) *UCLPPInterface_FailsafeDurationMinimum_Call {
	_c.Call.Return(run)
	return _c
}

// FailsafeProductionActivePowerLimit provides a mock function with given fields: entity
func (_m *UCLPPInterface) FailsafeProductionActivePowerLimit(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for FailsafeProductionActivePowerLimit")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLPPInterface_FailsafeProductionActivePowerLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailsafeProductionActivePowerLimit'
type UCLPPInterface_FailsafeProductionActivePowerLimit_Call struct {
	*mock.Call
}

// FailsafeProductionActivePowerLimit is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCLPPInterface_Expecter) FailsafeProductionActivePowerLimit(entity interface{}) *UCLPPInterface_FailsafeProductionActivePowerLimit_Call {
	return &UCLPPInterface_FailsafeProductionActivePowerLimit_Call{Call: _e.mock.On("FailsafeProductionActivePowerLimit", entity)}
}

func (_c *UCLPPInterface_FailsafeProductionActivePowerLimit_Call) Run(run func(entity api.EntityRemoteInterface)) *UCLPPInterface_FailsafeProductionActivePowerLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLPPInterface_FailsafeProductionActivePowerLimit_Call) Return(_a0 float64, _a1 error) *UCLPPInterface_FailsafeProductionActivePowerLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLPPInterface_FailsafeProductionActivePowerLimit_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCLPPInterface_FailsafeProductionActivePowerLimit_Call {
	_c.Call.Return(run)
	return _c
}

// IsUseCaseSupported provides a mock function with given fields: remoteEntity
func (_m *UCLPPInterface) IsUseCaseSupported(remoteEntity api.EntityRemoteInterface) (bool, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for IsUseCaseSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (bool, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) bool); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLPPInterface_IsUseCaseSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUseCaseSupported'
type UCLPPInterface_IsUseCaseSupported_Call struct {
	*mock.Call
}

// IsUseCaseSupported is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCLPPInterface_Expecter) IsUseCaseSupported(remoteEntity interface{}) *UCLPPInterface_IsUseCaseSupported_Call {
	return &UCLPPInterface_IsUseCaseSupported_Call{Call: _e.mock.On("IsUseCaseSupported", remoteEntity)}
}

func (_c *UCLPPInterface_IsUseCaseSupported_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCLPPInterface_IsUseCaseSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLPPInterface_IsUseCaseSupported_Call) Return(_a0 bool, _a1 error) *UCLPPInterface_IsUseCaseSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLPPInterface_IsUseCaseSupported_Call) RunAndReturn(run func(api.EntityRemoteInterface) (bool, error)) *UCLPPInterface_IsUseCaseSupported_Call {
	_c.Call.Return(run)
	return _c
}

// PowerProductionNominalMax provides a mock function with given fields: entity
func (_m *UCLPPInterface) PowerProductionNominalMax(entity api.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for PowerProductionNominalMax")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLPPInterface_PowerProductionNominalMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerProductionNominalMax'
type UCLPPInterface_PowerProductionNominalMax_Call struct {
	*mock.Call
}

// PowerProductionNominalMax is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCLPPInterface_Expecter) PowerProductionNominalMax(entity interface{}) *UCLPPInterface_PowerProductionNominalMax_Call {
	return &UCLPPInterface_PowerProductionNominalMax_Call{Call: _e.mock.On("PowerProductionNominalMax", entity)}
}

func (_c *UCLPPInterface_PowerProductionNominalMax_Call) Run(run func(entity api.EntityRemoteInterface)) *UCLPPInterface_PowerProductionNominalMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLPPInterface_PowerProductionNominalMax_Call) Return(_a0 float64, _a1 error) *UCLPPInterface_PowerProductionNominalMax_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLPPInterface_PowerProductionNominalMax_Call) RunAndReturn(run func(api.EntityRemoteInterface) (float64, error)) *UCLPPInterface_PowerProductionNominalMax_Call {
	_c.Call.Return(run)
	return _c
}

// ProductionLimit provides a mock function with given fields: entity
func (_m *UCLPPInterface) ProductionLimit(entity api.EntityRemoteInterface) (cemdapi.LoadLimit, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for ProductionLimit")
	}

	var r0 cemdapi.LoadLimit
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (cemdapi.LoadLimit, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) cemdapi.LoadLimit); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(cemdapi.LoadLimit)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLPPInterface_ProductionLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProductionLimit'
type UCLPPInterface_ProductionLimit_Call struct {
	*mock.Call
}

// ProductionLimit is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCLPPInterface_Expecter) ProductionLimit(entity interface{}) *UCLPPInterface_ProductionLimit_Call {
	return &UCLPPInterface_ProductionLimit_Call{Call: _e.mock.On("ProductionLimit", entity)}
}

func (_c *UCLPPInterface_ProductionLimit_Call) Run(run func(entity api.EntityRemoteInterface)) *UCLPPInterface_ProductionLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCLPPInterface_ProductionLimit_Call) Return(limit cemdapi.LoadLimit, resultErr error) *UCLPPInterface_ProductionLimit_Call {
	_c.Call.Return(limit, resultErr)
	return _c
}

func (_c *UCLPPInterface_ProductionLimit_Call) RunAndReturn(run func(api.EntityRemoteInterface) (cemdapi.LoadLimit, error)) *UCLPPInterface_ProductionLimit_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *UCLPPInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// UCLPPInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type UCLPPInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *UCLPPInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *UCLPPInterface_UpdateUseCaseAvailability_Call {
	return &UCLPPInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *UCLPPInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *UCLPPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *UCLPPInterface_UpdateUseCaseAvailability_Call) Return() *UCLPPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCLPPInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *UCLPPInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// UseCaseName provides a mock function with given fields:
func (_m *UCLPPInterface) UseCaseName() model.UseCaseNameType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCaseName")
	}

	var r0 model.UseCaseNameType
	if rf, ok := ret.Get(0).(func() model.UseCaseNameType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UseCaseNameType)
	}

	return r0
}

// UCLPPInterface_UseCaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCaseName'
type UCLPPInterface_UseCaseName_Call struct {
	*mock.Call
}

// UseCaseName is a helper method to define mock.On call
func (_e *UCLPPInterface_Expecter) UseCaseName() *UCLPPInterface_UseCaseName_Call {
	return &UCLPPInterface_UseCaseName_Call{Call: _e.mock.On("UseCaseName")}
}

func (_c *UCLPPInterface_UseCaseName_Call) Run(run func()) *UCLPPInterface_UseCaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCLPPInterface_UseCaseName_Call) Return(_a0 model.UseCaseNameType) *UCLPPInterface_UseCaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCLPPInterface_UseCaseName_Call) RunAndReturn(run func() model.UseCaseNameType) *UCLPPInterface_UseCaseName_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFailsafeDurationMinimum provides a mock function with given fields: entity, duration
func (_m *UCLPPInterface) WriteFailsafeDurationMinimum(entity api.EntityRemoteInterface, duration time.Duration) (*model.MsgCounterType, error) {
	ret := _m.Called(entity, duration)

	if len(ret) == 0 {
		panic("no return value specified for WriteFailsafeDurationMinimum")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, time.Duration) (*model.MsgCounterType, error)); ok {
		return rf(entity, duration)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, time.Duration) *model.MsgCounterType); ok {
		r0 = rf(entity, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface, time.Duration) error); ok {
		r1 = rf(entity, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLPPInterface_WriteFailsafeDurationMinimum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFailsafeDurationMinimum'
type UCLPPInterface_WriteFailsafeDurationMinimum_Call struct {
	*mock.Call
}

// WriteFailsafeDurationMinimum is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - duration time.Duration
func (_e *UCLPPInterface_Expecter) WriteFailsafeDurationMinimum(entity interface{}, duration interface{}) *UCLPPInterface_WriteFailsafeDurationMinimum_Call {
	return &UCLPPInterface_WriteFailsafeDurationMinimum_Call{Call: _e.mock.On("WriteFailsafeDurationMinimum", entity, duration)}
}

func (_c *UCLPPInterface_WriteFailsafeDurationMinimum_Call) Run(run func(entity api.EntityRemoteInterface, duration time.Duration)) *UCLPPInterface_WriteFailsafeDurationMinimum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].(time.Duration))
	})
	return _c
}

func (_c *UCLPPInterface_WriteFailsafeDurationMinimum_Call) Return(_a0 *model.MsgCounterType, _a1 error) *UCLPPInterface_WriteFailsafeDurationMinimum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLPPInterface_WriteFailsafeDurationMinimum_Call) RunAndReturn(run func(api.EntityRemoteInterface, time.Duration) (*model.MsgCounterType, error)) *UCLPPInterface_WriteFailsafeDurationMinimum_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFailsafeProductionActivePowerLimit provides a mock function with given fields: entity, value
func (_m *UCLPPInterface) WriteFailsafeProductionActivePowerLimit(entity api.EntityRemoteInterface, value float64) (*model.MsgCounterType, error) {
	ret := _m.Called(entity, value)

	if len(ret) == 0 {
		panic("no return value specified for WriteFailsafeProductionActivePowerLimit")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, float64) (*model.MsgCounterType, error)); ok {
		return rf(entity, value)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, float64) *model.MsgCounterType); ok {
		r0 = rf(entity, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface, float64) error); ok {
		r1 = rf(entity, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFailsafeProductionActivePowerLimit'
type UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call struct {
	*mock.Call
}

// WriteFailsafeProductionActivePowerLimit is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - value float64
func (_e *UCLPPInterface_Expecter) WriteFailsafeProductionActivePowerLimit(entity interface{}, value interface{}) *UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call {
	return &UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call{Call: _e.mock.On("WriteFailsafeProductionActivePowerLimit", entity, value)}
}

func (_c *UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call) Run(run func(entity api.EntityRemoteInterface, value float64)) *UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].(float64))
	})
	return _c
}

func (_c *UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call) Return(_a0 *model.MsgCounterType, _a1 error) *UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call) RunAndReturn(run func(api.EntityRemoteInterface, float64) (*model.MsgCounterType, error)) *UCLPPInterface_WriteFailsafeProductionActivePowerLimit_Call {
	_c.Call.Return(run)
	return _c
}

// WriteProductionLimit provides a mock function with given fields: entity, limit
func (_m *UCLPPInterface) WriteProductionLimit(entity api.EntityRemoteInterface, limit cemdapi.LoadLimit) (*model.MsgCounterType, error) {
	ret := _m.Called(entity, limit)

	if len(ret) == 0 {
		panic("no return value specified for WriteProductionLimit")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, cemdapi.LoadLimit) (*model.MsgCounterType, error)); ok {
		return rf(entity, limit)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, cemdapi.LoadLimit) *model.MsgCounterType); ok {
		r0 = rf(entity, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface, cemdapi.LoadLimit) error); ok {
		r1 = rf(entity, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCLPPInterface_WriteProductionLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteProductionLimit'
type UCLPPInterface_WriteProductionLimit_Call struct {
	*mock.Call
}

// WriteProductionLimit is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - limit cemdapi.LoadLimit
func (_e *UCLPPInterface_Expecter) WriteProductionLimit(entity interface{}, limit interface{}) *UCLPPInterface_WriteProductionLimit_Call {
	return &UCLPPInterface_WriteProductionLimit_Call{Call: _e.mock.On("WriteProductionLimit", entity, limit)}
}

func (_c *UCLPPInterface_WriteProductionLimit_Call) Run(run func(entity api.EntityRemoteInterface, limit cemdapi.LoadLimit)) *UCLPPInterface_WriteProductionLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].(cemdapi.LoadLimit))
	})
	return _c
}

func (_c *UCLPPInterface_WriteProductionLimit_Call) Return(_a0 *model.MsgCounterType, _a1 error) *UCLPPInterface_WriteProductionLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCLPPInterface_WriteProductionLimit_Call) RunAndReturn(run func(api.EntityRemoteInterface, cemdapi.LoadLimit) (*model.MsgCounterType, error)) *UCLPPInterface_WriteProductionLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewUCLPPInterface creates a new instance of UCLPPInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUCLPPInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UCLPPInterface {
	mock := &UCLPPInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
