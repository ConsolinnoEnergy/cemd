// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	cemdapi "github.com/enbility/cemd/api"
	api "github.com/enbility/spine-go/api"

	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// UCCEVCInterface is an autogenerated mock type for the UCCEVCInterface type
type UCCEVCInterface struct {
	mock.Mock
}

type UCCEVCInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UCCEVCInterface) EXPECT() *UCCEVCInterface_Expecter {
	return &UCCEVCInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *UCCEVCInterface) AddFeatures() {
	_m.Called()
}

// UCCEVCInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type UCCEVCInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *UCCEVCInterface_Expecter) AddFeatures() *UCCEVCInterface_AddFeatures_Call {
	return &UCCEVCInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *UCCEVCInterface_AddFeatures_Call) Run(run func()) *UCCEVCInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCCEVCInterface_AddFeatures_Call) Return() *UCCEVCInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCCEVCInterface_AddFeatures_Call) RunAndReturn(run func()) *UCCEVCInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *UCCEVCInterface) AddUseCase() {
	_m.Called()
}

// UCCEVCInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type UCCEVCInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *UCCEVCInterface_Expecter) AddUseCase() *UCCEVCInterface_AddUseCase_Call {
	return &UCCEVCInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *UCCEVCInterface_AddUseCase_Call) Run(run func()) *UCCEVCInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCCEVCInterface_AddUseCase_Call) Return() *UCCEVCInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCCEVCInterface_AddUseCase_Call) RunAndReturn(run func()) *UCCEVCInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// ChargePlan provides a mock function with given fields: entity
func (_m *UCCEVCInterface) ChargePlan(entity api.EntityRemoteInterface) (cemdapi.ChargePlan, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for ChargePlan")
	}

	var r0 cemdapi.ChargePlan
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (cemdapi.ChargePlan, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) cemdapi.ChargePlan); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(cemdapi.ChargePlan)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCCEVCInterface_ChargePlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChargePlan'
type UCCEVCInterface_ChargePlan_Call struct {
	*mock.Call
}

// ChargePlan is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCCEVCInterface_Expecter) ChargePlan(entity interface{}) *UCCEVCInterface_ChargePlan_Call {
	return &UCCEVCInterface_ChargePlan_Call{Call: _e.mock.On("ChargePlan", entity)}
}

func (_c *UCCEVCInterface_ChargePlan_Call) Run(run func(entity api.EntityRemoteInterface)) *UCCEVCInterface_ChargePlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCCEVCInterface_ChargePlan_Call) Return(_a0 cemdapi.ChargePlan, _a1 error) *UCCEVCInterface_ChargePlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCCEVCInterface_ChargePlan_Call) RunAndReturn(run func(api.EntityRemoteInterface) (cemdapi.ChargePlan, error)) *UCCEVCInterface_ChargePlan_Call {
	_c.Call.Return(run)
	return _c
}

// ChargePlanConstraints provides a mock function with given fields: entity
func (_m *UCCEVCInterface) ChargePlanConstraints(entity api.EntityRemoteInterface) ([]cemdapi.DurationSlotValue, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for ChargePlanConstraints")
	}

	var r0 []cemdapi.DurationSlotValue
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) ([]cemdapi.DurationSlotValue, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) []cemdapi.DurationSlotValue); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cemdapi.DurationSlotValue)
		}
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCCEVCInterface_ChargePlanConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChargePlanConstraints'
type UCCEVCInterface_ChargePlanConstraints_Call struct {
	*mock.Call
}

// ChargePlanConstraints is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCCEVCInterface_Expecter) ChargePlanConstraints(entity interface{}) *UCCEVCInterface_ChargePlanConstraints_Call {
	return &UCCEVCInterface_ChargePlanConstraints_Call{Call: _e.mock.On("ChargePlanConstraints", entity)}
}

func (_c *UCCEVCInterface_ChargePlanConstraints_Call) Run(run func(entity api.EntityRemoteInterface)) *UCCEVCInterface_ChargePlanConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCCEVCInterface_ChargePlanConstraints_Call) Return(_a0 []cemdapi.DurationSlotValue, _a1 error) *UCCEVCInterface_ChargePlanConstraints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCCEVCInterface_ChargePlanConstraints_Call) RunAndReturn(run func(api.EntityRemoteInterface) ([]cemdapi.DurationSlotValue, error)) *UCCEVCInterface_ChargePlanConstraints_Call {
	_c.Call.Return(run)
	return _c
}

// ChargeStrategy provides a mock function with given fields: remoteEntity
func (_m *UCCEVCInterface) ChargeStrategy(remoteEntity api.EntityRemoteInterface) cemdapi.EVChargeStrategyType {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for ChargeStrategy")
	}

	var r0 cemdapi.EVChargeStrategyType
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) cemdapi.EVChargeStrategyType); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(cemdapi.EVChargeStrategyType)
	}

	return r0
}

// UCCEVCInterface_ChargeStrategy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChargeStrategy'
type UCCEVCInterface_ChargeStrategy_Call struct {
	*mock.Call
}

// ChargeStrategy is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCCEVCInterface_Expecter) ChargeStrategy(remoteEntity interface{}) *UCCEVCInterface_ChargeStrategy_Call {
	return &UCCEVCInterface_ChargeStrategy_Call{Call: _e.mock.On("ChargeStrategy", remoteEntity)}
}

func (_c *UCCEVCInterface_ChargeStrategy_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCCEVCInterface_ChargeStrategy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCCEVCInterface_ChargeStrategy_Call) Return(_a0 cemdapi.EVChargeStrategyType) *UCCEVCInterface_ChargeStrategy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCCEVCInterface_ChargeStrategy_Call) RunAndReturn(run func(api.EntityRemoteInterface) cemdapi.EVChargeStrategyType) *UCCEVCInterface_ChargeStrategy_Call {
	_c.Call.Return(run)
	return _c
}

// EnergyDemand provides a mock function with given fields: remoteEntity
func (_m *UCCEVCInterface) EnergyDemand(remoteEntity api.EntityRemoteInterface) (cemdapi.Demand, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for EnergyDemand")
	}

	var r0 cemdapi.Demand
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (cemdapi.Demand, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) cemdapi.Demand); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(cemdapi.Demand)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCCEVCInterface_EnergyDemand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnergyDemand'
type UCCEVCInterface_EnergyDemand_Call struct {
	*mock.Call
}

// EnergyDemand is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCCEVCInterface_Expecter) EnergyDemand(remoteEntity interface{}) *UCCEVCInterface_EnergyDemand_Call {
	return &UCCEVCInterface_EnergyDemand_Call{Call: _e.mock.On("EnergyDemand", remoteEntity)}
}

func (_c *UCCEVCInterface_EnergyDemand_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCCEVCInterface_EnergyDemand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCCEVCInterface_EnergyDemand_Call) Return(_a0 cemdapi.Demand, _a1 error) *UCCEVCInterface_EnergyDemand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCCEVCInterface_EnergyDemand_Call) RunAndReturn(run func(api.EntityRemoteInterface) (cemdapi.Demand, error)) *UCCEVCInterface_EnergyDemand_Call {
	_c.Call.Return(run)
	return _c
}

// IncentiveConstraints provides a mock function with given fields: entity
func (_m *UCCEVCInterface) IncentiveConstraints(entity api.EntityRemoteInterface) (cemdapi.IncentiveSlotConstraints, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for IncentiveConstraints")
	}

	var r0 cemdapi.IncentiveSlotConstraints
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (cemdapi.IncentiveSlotConstraints, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) cemdapi.IncentiveSlotConstraints); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(cemdapi.IncentiveSlotConstraints)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCCEVCInterface_IncentiveConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncentiveConstraints'
type UCCEVCInterface_IncentiveConstraints_Call struct {
	*mock.Call
}

// IncentiveConstraints is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCCEVCInterface_Expecter) IncentiveConstraints(entity interface{}) *UCCEVCInterface_IncentiveConstraints_Call {
	return &UCCEVCInterface_IncentiveConstraints_Call{Call: _e.mock.On("IncentiveConstraints", entity)}
}

func (_c *UCCEVCInterface_IncentiveConstraints_Call) Run(run func(entity api.EntityRemoteInterface)) *UCCEVCInterface_IncentiveConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCCEVCInterface_IncentiveConstraints_Call) Return(_a0 cemdapi.IncentiveSlotConstraints, _a1 error) *UCCEVCInterface_IncentiveConstraints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCCEVCInterface_IncentiveConstraints_Call) RunAndReturn(run func(api.EntityRemoteInterface) (cemdapi.IncentiveSlotConstraints, error)) *UCCEVCInterface_IncentiveConstraints_Call {
	_c.Call.Return(run)
	return _c
}

// IsUseCaseSupported provides a mock function with given fields: remoteEntity
func (_m *UCCEVCInterface) IsUseCaseSupported(remoteEntity api.EntityRemoteInterface) (bool, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for IsUseCaseSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (bool, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) bool); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCCEVCInterface_IsUseCaseSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUseCaseSupported'
type UCCEVCInterface_IsUseCaseSupported_Call struct {
	*mock.Call
}

// IsUseCaseSupported is a helper method to define mock.On call
//   - remoteEntity api.EntityRemoteInterface
func (_e *UCCEVCInterface_Expecter) IsUseCaseSupported(remoteEntity interface{}) *UCCEVCInterface_IsUseCaseSupported_Call {
	return &UCCEVCInterface_IsUseCaseSupported_Call{Call: _e.mock.On("IsUseCaseSupported", remoteEntity)}
}

func (_c *UCCEVCInterface_IsUseCaseSupported_Call) Run(run func(remoteEntity api.EntityRemoteInterface)) *UCCEVCInterface_IsUseCaseSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCCEVCInterface_IsUseCaseSupported_Call) Return(_a0 bool, _a1 error) *UCCEVCInterface_IsUseCaseSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCCEVCInterface_IsUseCaseSupported_Call) RunAndReturn(run func(api.EntityRemoteInterface) (bool, error)) *UCCEVCInterface_IsUseCaseSupported_Call {
	_c.Call.Return(run)
	return _c
}

// TimeSlotConstraints provides a mock function with given fields: entity
func (_m *UCCEVCInterface) TimeSlotConstraints(entity api.EntityRemoteInterface) (cemdapi.TimeSlotConstraints, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for TimeSlotConstraints")
	}

	var r0 cemdapi.TimeSlotConstraints
	var r1 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) (cemdapi.TimeSlotConstraints, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface) cemdapi.TimeSlotConstraints); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(cemdapi.TimeSlotConstraints)
	}

	if rf, ok := ret.Get(1).(func(api.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UCCEVCInterface_TimeSlotConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeSlotConstraints'
type UCCEVCInterface_TimeSlotConstraints_Call struct {
	*mock.Call
}

// TimeSlotConstraints is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
func (_e *UCCEVCInterface_Expecter) TimeSlotConstraints(entity interface{}) *UCCEVCInterface_TimeSlotConstraints_Call {
	return &UCCEVCInterface_TimeSlotConstraints_Call{Call: _e.mock.On("TimeSlotConstraints", entity)}
}

func (_c *UCCEVCInterface_TimeSlotConstraints_Call) Run(run func(entity api.EntityRemoteInterface)) *UCCEVCInterface_TimeSlotConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface))
	})
	return _c
}

func (_c *UCCEVCInterface_TimeSlotConstraints_Call) Return(_a0 cemdapi.TimeSlotConstraints, _a1 error) *UCCEVCInterface_TimeSlotConstraints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UCCEVCInterface_TimeSlotConstraints_Call) RunAndReturn(run func(api.EntityRemoteInterface) (cemdapi.TimeSlotConstraints, error)) *UCCEVCInterface_TimeSlotConstraints_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *UCCEVCInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// UCCEVCInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type UCCEVCInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *UCCEVCInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *UCCEVCInterface_UpdateUseCaseAvailability_Call {
	return &UCCEVCInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *UCCEVCInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *UCCEVCInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *UCCEVCInterface_UpdateUseCaseAvailability_Call) Return() *UCCEVCInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *UCCEVCInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *UCCEVCInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// UseCaseName provides a mock function with given fields:
func (_m *UCCEVCInterface) UseCaseName() model.UseCaseNameType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCaseName")
	}

	var r0 model.UseCaseNameType
	if rf, ok := ret.Get(0).(func() model.UseCaseNameType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UseCaseNameType)
	}

	return r0
}

// UCCEVCInterface_UseCaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCaseName'
type UCCEVCInterface_UseCaseName_Call struct {
	*mock.Call
}

// UseCaseName is a helper method to define mock.On call
func (_e *UCCEVCInterface_Expecter) UseCaseName() *UCCEVCInterface_UseCaseName_Call {
	return &UCCEVCInterface_UseCaseName_Call{Call: _e.mock.On("UseCaseName")}
}

func (_c *UCCEVCInterface_UseCaseName_Call) Run(run func()) *UCCEVCInterface_UseCaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UCCEVCInterface_UseCaseName_Call) Return(_a0 model.UseCaseNameType) *UCCEVCInterface_UseCaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCCEVCInterface_UseCaseName_Call) RunAndReturn(run func() model.UseCaseNameType) *UCCEVCInterface_UseCaseName_Call {
	_c.Call.Return(run)
	return _c
}

// WriteIncentiveTableDescriptions provides a mock function with given fields: entity, data
func (_m *UCCEVCInterface) WriteIncentiveTableDescriptions(entity api.EntityRemoteInterface, data []cemdapi.IncentiveTariffDescription) error {
	ret := _m.Called(entity, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteIncentiveTableDescriptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, []cemdapi.IncentiveTariffDescription) error); ok {
		r0 = rf(entity, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UCCEVCInterface_WriteIncentiveTableDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteIncentiveTableDescriptions'
type UCCEVCInterface_WriteIncentiveTableDescriptions_Call struct {
	*mock.Call
}

// WriteIncentiveTableDescriptions is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - data []cemdapi.IncentiveTariffDescription
func (_e *UCCEVCInterface_Expecter) WriteIncentiveTableDescriptions(entity interface{}, data interface{}) *UCCEVCInterface_WriteIncentiveTableDescriptions_Call {
	return &UCCEVCInterface_WriteIncentiveTableDescriptions_Call{Call: _e.mock.On("WriteIncentiveTableDescriptions", entity, data)}
}

func (_c *UCCEVCInterface_WriteIncentiveTableDescriptions_Call) Run(run func(entity api.EntityRemoteInterface, data []cemdapi.IncentiveTariffDescription)) *UCCEVCInterface_WriteIncentiveTableDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].([]cemdapi.IncentiveTariffDescription))
	})
	return _c
}

func (_c *UCCEVCInterface_WriteIncentiveTableDescriptions_Call) Return(_a0 error) *UCCEVCInterface_WriteIncentiveTableDescriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCCEVCInterface_WriteIncentiveTableDescriptions_Call) RunAndReturn(run func(api.EntityRemoteInterface, []cemdapi.IncentiveTariffDescription) error) *UCCEVCInterface_WriteIncentiveTableDescriptions_Call {
	_c.Call.Return(run)
	return _c
}

// WriteIncentives provides a mock function with given fields: entity, data
func (_m *UCCEVCInterface) WriteIncentives(entity api.EntityRemoteInterface, data []cemdapi.DurationSlotValue) error {
	ret := _m.Called(entity, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteIncentives")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, []cemdapi.DurationSlotValue) error); ok {
		r0 = rf(entity, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UCCEVCInterface_WriteIncentives_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteIncentives'
type UCCEVCInterface_WriteIncentives_Call struct {
	*mock.Call
}

// WriteIncentives is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - data []cemdapi.DurationSlotValue
func (_e *UCCEVCInterface_Expecter) WriteIncentives(entity interface{}, data interface{}) *UCCEVCInterface_WriteIncentives_Call {
	return &UCCEVCInterface_WriteIncentives_Call{Call: _e.mock.On("WriteIncentives", entity, data)}
}

func (_c *UCCEVCInterface_WriteIncentives_Call) Run(run func(entity api.EntityRemoteInterface, data []cemdapi.DurationSlotValue)) *UCCEVCInterface_WriteIncentives_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].([]cemdapi.DurationSlotValue))
	})
	return _c
}

func (_c *UCCEVCInterface_WriteIncentives_Call) Return(_a0 error) *UCCEVCInterface_WriteIncentives_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCCEVCInterface_WriteIncentives_Call) RunAndReturn(run func(api.EntityRemoteInterface, []cemdapi.DurationSlotValue) error) *UCCEVCInterface_WriteIncentives_Call {
	_c.Call.Return(run)
	return _c
}

// WritePowerLimits provides a mock function with given fields: entity, data
func (_m *UCCEVCInterface) WritePowerLimits(entity api.EntityRemoteInterface, data []cemdapi.DurationSlotValue) error {
	ret := _m.Called(entity, data)

	if len(ret) == 0 {
		panic("no return value specified for WritePowerLimits")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.EntityRemoteInterface, []cemdapi.DurationSlotValue) error); ok {
		r0 = rf(entity, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UCCEVCInterface_WritePowerLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WritePowerLimits'
type UCCEVCInterface_WritePowerLimits_Call struct {
	*mock.Call
}

// WritePowerLimits is a helper method to define mock.On call
//   - entity api.EntityRemoteInterface
//   - data []cemdapi.DurationSlotValue
func (_e *UCCEVCInterface_Expecter) WritePowerLimits(entity interface{}, data interface{}) *UCCEVCInterface_WritePowerLimits_Call {
	return &UCCEVCInterface_WritePowerLimits_Call{Call: _e.mock.On("WritePowerLimits", entity, data)}
}

func (_c *UCCEVCInterface_WritePowerLimits_Call) Run(run func(entity api.EntityRemoteInterface, data []cemdapi.DurationSlotValue)) *UCCEVCInterface_WritePowerLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemoteInterface), args[1].([]cemdapi.DurationSlotValue))
	})
	return _c
}

func (_c *UCCEVCInterface_WritePowerLimits_Call) Return(_a0 error) *UCCEVCInterface_WritePowerLimits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UCCEVCInterface_WritePowerLimits_Call) RunAndReturn(run func(api.EntityRemoteInterface, []cemdapi.DurationSlotValue) error) *UCCEVCInterface_WritePowerLimits_Call {
	_c.Call.Return(run)
	return _c
}

// NewUCCEVCInterface creates a new instance of UCCEVCInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUCCEVCInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UCCEVCInterface {
	mock := &UCCEVCInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
